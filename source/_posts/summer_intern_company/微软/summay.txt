感觉频繁出的题包括：

1. 二维地图找位置 dfs 记忆化深度优先搜索
注意：如果面试的时候，要问清楚面试官是否能修改原数组，不能的话就得加入标记数组，不要一给题就直接上手

2. 其他dfs题目， 多个头节点的BFS

3. 一般是一道简单题扩展到hard,或者直接上hard；不管是否做出来，都应该讲一讲自己的思路，同时说出时间和空间复杂度

4. 练习在word上编写代码， 使用自己的IDE, 同时自己编写测试用例进行测试

5. 看一看系统设计相关的题目， 大数据， 多线程， 分布式系统设计

6. 前K最大的题目：使用小根堆，为了简化结构体元素的比较，可以先push发现size>k, 再pop; 对于比较简单的可以直接比较后，判断是否push

7. 计算器的相关题目

问一下题目是在word还是自己的IDE上面进行编辑


易错点：每次pop peek一定要判断栈非空再执行相关操作

对结构体进行快速排序的模板
```C++
    void qsort(vector<pair<int, int>>& v, int start, int end, vector<int>& ret, int k) {
        int picked = rand() % (end - start + 1) + start;
        swap(v[picked], v[start]);

        int pivot = v[start].second;
        int index = start;
        for (int i = start + 1; i <= end; i++) {
            if (v[i].second >= pivot) {
                swap(v[index + 1], v[i]);
                index++;
            }
        }
        swap(v[start], v[index]);

        if (k <= index - start) {
            qsort(v, start, index - 1, ret, k);
        } else {
            for (int i = start; i <= index; i++) {
                ret.push_back(v[i].first);
            }
            if (k > index - start + 1) {
                qsort(v, index + 1, end, ret, k - (index - start + 1));
            }
        }
    }

```

明天从1214开始看，已经看完，下次继续从苏州那里开始看

自动和通用的解决方案，而不是针对一类问题

直接说优点和缺点，缺点就是在调节参数的时候使用表格记录，
将机器学习的自动调参的方法应用到深度学习中，学习一些机器学习自动调参的方法，比如网格搜索或者随机化搜索的方式调参，或者使用启发式调参方式比如使用Ray Tune的方法进行自动调参

最初学习目标检测，确实只是从现有的模型上进行了选择，没有进行进一步对现有模型的扩展


TOPK相关的题目
总结比较好的面经：https://gxin.yuque.com/docs/share/5eb3fa50-61f3-4b41-ad02-8d88ca29a1d1?#
https://github.com/weitingyuk/LeetCode-Notes-Waiting/blob/main/2021-02-17/TopK.md

